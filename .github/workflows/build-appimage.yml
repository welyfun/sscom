name: Build and Release AppImage

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build-appimage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download AppImageTool
        run: |
          wget https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage

      - name: Build AppImage
        run: |
          ./appimagetool-x86_64.AppImage sscom.AppDir

      - name: Delete existing Continuous Build release
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // 获取所有release
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              
              // 查找名为"Continuous Build"的release
              const existingRelease = releases.data.find(release => release.name === "Continuous Build");
              
              if (existingRelease) {
                console.log(`Deleting existing release: ${existingRelease.name} (ID: ${existingRelease.id})`);
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: existingRelease.id
                });
                return "deleted";
              }
              return "not_found";
            } catch (error) {
              core.error(`Failed to delete release: ${error}`);
              core.setFailed(error.message);
              return "error";
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: continuous
          release_name: Continuous Build
          body: Automatic build from main branch
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: sscom-x86_64.AppImage
          asset_name: sscom-x86_64.AppImage
          asset_content_type: application/octet-stream